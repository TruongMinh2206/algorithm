// 5.1 reverses

function reverseArrayReduce(arr) {
  return arr.reduce((acc, item) => [item, ...acc], []);
}

console.log(reverseArrayReduce([1, 2, 3, 4, 5])); // Output: [5, 4, 3, 2, 1]


  
  // 5.2 chunk
  
  function chunk(array, size) {
    return array.reduce((acc, item, index) => {
        if (index % size === 0) {
            acc.push([]);
        }
        acc[acc.length - 1].push(item);
        return acc;
    }, []);
}

console.log(chunk(['a', 'b', 'c', 'd'], 2)); // [['a', 'b'], ['c', 'd']]
console.log(chunk(['a', 'b', 'c', 'd'], 3)); // [['a', 'b', 'c'], ['d']]

  
  //  5.3 uniq: Cho m·ªôt m·∫£ng ƒë·∫ßu v√†o, vi·∫øt m·ªôt function ƒë·ªÉ lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ b·ªã l·∫∑p trong m·∫£ng.
  // V√≠ d·ª• [1, 2, 3, 2, 4] üëâ [1, 2, 3, 4]
  
  function uniq(array) {
    return [...new Set(array)];
}

console.log(uniq([1, 2, 3, 2, 4])); // üëâ [1, 2, 3, 4]
console.log(uniq(['a', 'b', 'a', 'c'])); // üëâ ['a', 'b', 'c']

  //5.4 uniq ArrayObject: Gi·ªëng Uniq nh∆∞ng m·ªü r·ªông cho 1 collection
  // [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'y': 2, 'x': 1 }]
  
  function uniqObjects(array) {
    let seen = new Set();
    return array.filter(obj => {             
        let key = JSON.stringify(Object.entries(obj).sort());          
        if (!seen.has(key)) {
            seen.add(key);
            return true;
        }
        return false;
    });
}
//D√πng Object.entries(obj).sort() ƒë·ªÉ s·∫Øp x·∫øp key theo th·ª© t·ª±, gi√∫p chu·∫©n h√≥a object.

//Chuy·ªÉn th√†nh chu·ªói b·∫±ng JSON.stringify().

//D√πng Set ƒë·ªÉ l∆∞u l·∫°i c√°c chu·ªói duy nh·∫•t.
console.log(uniqObjects([
    { 'x': 1, 'y': 2 }, 
    { 'x': 2, 'y': 1 }, 
    { 'y': 2, 'x': 1 }
])); 
// üëâ [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]

  
  // 5.5 Group by: Cho ƒë·∫ßu v√†o l√† 1 collection ( array of object ),
  // Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra 1 OBJECT m·ªõi ch·ª©a d·ªØ li·ªáu ƒë∆∞·ª£c group theo tr∆∞·ªùng ch·ªâ ƒë·ªãnh.
  
  function groupBy(array, key) {
    return array.reduce((result, item) => {
        let groupKey = item[key]; // L·∫•y gi√° tr·ªã c·ªßa key ch·ªâ ƒë·ªãnh

        if (!result[groupKey]) {
            result[groupKey] = []; // N·∫øu ch∆∞a c√≥ nh√≥m n√†y th√¨ t·∫°o m·∫£ng m·ªõi
        }

        result[groupKey].push(item); // Th√™m object v√†o nh√≥m t∆∞∆°ng ·ª©ng
        return result;
    }, {});
}

// Test case
const collect = [{a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 2}];

console.log(groupBy(collect, 'a'));
// Output: {1: [{a: 1, b: 2}, {a: 1, b: 3}], 2: [{a: 2, b: 2}]}

console.log(groupBy(collect, 'b'));
// Output: {2: [{a: 1, b: 2}, {a: 2, b: 2}], 3: [{a: 1, b: 3}]}

  
  // 5.6 TrimAll: Vi·∫øt function lo·∫°i b·ªè t·∫•t c·∫£ kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi c·ªßa m·ªôt chu·ªói b·∫•t k·ª≥, n·∫øu c√≥ kho·∫£ng tr·∫Øng ·ªü gi·ªØa chu·ªói ƒë√≥ th√¨ ch·ªâ gi·ªØ l·∫°i m·ªôt kho·∫£ng tr·∫Øng.
  // VD:
  // ‚Äú    hello     world    ‚Äú üëâ ‚Äúhello world"
  // ‚Äú   I    am    good      ‚Äú üëâ ‚ÄúI am good‚Äù
  
  function trimAll(str) {
    return str.trim().replace(/\s+/g, ' ');
}

// Test case
console.log(trimAll("    hello     world    ")); // üëâ "hello world"
console.log(trimAll("   I    am    good      ")); // üëâ "I am good"

  
  // 5.7 MapKey: Cho 1 m·∫£ng c√°c key, v√†o 1 m·∫£ng c√°c object , Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra m·ªôt m·∫£ng c√°c object theo th·ª© t·ª± m·∫£ng c√°c key. ( Y√™u c·∫ßu d√πng h√†m map )
  // V√≠ d·ª•
  // keys = [‚Äòb', ‚Äòa', ‚Äòc']
  // collections = [{a: 1, b: 1, c: 2, d: 4, e: 5}, {a: 2, b:1, c: 5, d: 4, e: 5}, {d: 4, e: 5, a: 22, b:11, c: 51, }]
  // üëâ [{b: 1, a: 1, c: 2}, {b: 1, a: 2, c: 5}, {b: 11, a: 22, c: 51}]
  
  function mapKey(keys, collections) {
    return collections.map(obj => {
        return keys.reduce((result, key) => {
            if (obj.hasOwnProperty(key)) {
                result[key] = obj[key]; // Th√™m key v√†o object m·ªõi theo th·ª© t·ª± keys
            }
            return result;
        }, {});
    });
}

// Test case
const keys = ['b', 'a', 'c'];
const collections = [
    { a: 1, b: 1, c: 2, d: 4, e: 5 },
    { a: 2, b: 1, c: 5, d: 4, e: 5 },
    { d: 4, e: 5, a: 22, b: 11, c: 51 }
];

console.log(mapKey(keys, collections));
/*
Output:
[
  { b: 1, a: 1, c: 2 },
  { b: 1, a: 2, c: 5 },
  { b: 11, a: 22, c: 51 }
]
*/
  
  // 5.8 Switch Order: Vi·∫øt function ƒë·ªÉ thay ƒë·ªïi th·ª© t·ª± order c·ªßa c√°c object.
  function switchOrder(id, newOrder, arr) {
    // T√¨m index c·ªßa object c√≥ id c·∫ßn ƒë·ªïi
    const currentIndex = arr.findIndex(obj => obj.id === id);
    if (currentIndex === -1) return arr; // Kh√¥ng t√¨m th·∫•y id, tr·∫£ v·ªÅ m·∫£ng kh√¥ng thay ƒë·ªïi

    // L·∫•y object c·∫ßn ƒë·ªïi v√† x√≥a kh·ªèi m·∫£ng
    const [movedItem] = arr.splice(currentIndex, 1);

    // Ch√®n object v√†o v·ªã tr√≠ m·ªõi
    arr.splice(newOrder, 0, movedItem);

    // C·∫≠p nh·∫≠t l·∫°i order cho t·∫•t c·∫£ object trong m·∫£ng
    arr.forEach((obj, index) => obj.order = index);

    return arr;
}

// Test case
let arr = [
    { id: 10, order: 0 },
    { id: 12, order: 1 },
    { id: 9, order: 2 },
    { id: 11, order: 3 }
];

console.log(switchOrder(9, 1, arr));

  
  // 5.9 SumAll: Vi·∫øt function ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã c·ªßa c√°c key c·ªßa c√°c ph·∫ßn t·ª≠ con trong m·∫£ng b·∫•t k·ª≥:
  // V√≠ d·ª•:
  // Arr = [{a: 2, b: 10}, {a: 12, c: 11}, {a: 8, b: 14, d: 20}, {a: ‚Äò8‚Äô}]
  // üëâ {a: 30, b: 24, c: 11, d: 20}
  // ƒê·∫ßu v√†o l√† m·ªôt m·∫£ng c√°c object v√† c√°c ph·∫ßn t·ª≠ trong object kh√¥ng c·ªë ƒë·ªãnh.
  
  function sumAll(arr) {
    return arr.reduce((acc, obj) => {
        for (let key in obj) {
            let value = parseFloat(obj[key]); // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã v·ªÅ s·ªë n·∫øu l√† chu·ªói s·ªë
            if (!isNaN(value)) { // Ch·ªâ c·ªông n·∫øu l√† s·ªë h·ª£p l·ªá
                acc[key] = (acc[key] || 0) + value;
            }
        }
        return acc;
    }, {});
}

// Test case
let arrA = [
    { a: 2, b: 10 },
    { a: 12, c: 11 },
    { a: 8, b: 14, d: 20 },
    { a: '8' }
];

console.log(sumAll(arrA)); 
